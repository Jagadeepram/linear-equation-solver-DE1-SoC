library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.soc_eq_solver_pack.all;

entity write_sram_data is
	port (
	sram_readdata: in std_logic_vector(31 downto 0);
	sram_writedata: out std_logic_vector(31 downto 0);
	sram_address: out std_logic_vector(7 downto 0);
	sram_write: out std_logic;
	clk: in std_logic;
	write_en: in std_logic;
	row_len: in integer range 0 to UINT_MAX;
	col_len: in integer range 0 to UINT_MAX;
	ram: in ram_type;
	over_flow : in std_logic;
	store_done : out std_logic
	);
end write_sram_data;

architecture behave of write_sram_data is 
signal state: integer range 0 to 20 := 0;
signal row_index,col_index: integer range 0 to UINT_MAX := 0;
signal address: integer range 0 to UINT_MAX := 0;
signal data_count : integer range 0 to UINT_MAX := 0;
begin
	sram_address <= std_logic_vector(to_unsigned(address,sram_address'length));
	process(clk)
	begin
		if (rising_edge(clk)) then
			if (state = 0) then
				store_done <= '0';
				row_index <= 0;
				col_index <= 0;
				sram_write <= '0';
				address <= 1; 
				data_count <= 0;
				if (write_en = '1') then
					state <= 1;
				end if;
			elsif (state = 1) then
				sram_write <= '1';
				sram_writedata <= std_logic_vector(to_signed(ram(row_index)(col_index),sram_writedata'length));
				state <= 2;
				data_count <= data_count +1;
			elsif (state = 2) then
				sram_write <= '0';
				address <= address + 1;
				col_index <= col_index + 1;
				state <= 3;
			elsif (state = 3) then
				if (col_index = col_len) then
					row_index <= row_index +1;
					state <= 4;
				else
					state <= 1;
				end if;	
			elsif (state = 4) then
				col_index <= 0;
				if (row_index = row_len) then
					state <= 5;
				else
					state <= 1;
				end if;
			elsif (state = 5) then
				address <= 0;
				sram_write <= '1';
				state <= 6;
				
				if (over_flow = '0') then
					sram_writedata <= std_logic_vector(to_signed(data_count,sram_writedata'length));
				else
					sram_writedata <= std_logic_vector(to_signed(-1,sram_writedata'length));
				end if;				
			elsif (state = 6) then
				store_done <= '1';
				sram_write <= '0';
				if (write_en = '0') then
					state <= 0;
				end if;
			end if;
		end if;
	end process;
end behave;